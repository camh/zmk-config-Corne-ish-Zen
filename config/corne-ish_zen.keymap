/*
*
* Copyright (c) 2022 Cam Hunt
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MED 1
#define NAV 2
#define SYM 3
#define NUM 4
#define FUN 5

#define MEH LC(LS(LALT))

#define PLAY C_PLAY
#define STOP C_STOP
#define NEXT C_NEXT
#define PREV C_PREV
#define VOL_DN C_VOL_DN
#define VOL_UP C_VOL_UP

#define END_CALL LC(LA(LG(END)))

&mt {
    tapping_term_ms = <211>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <211>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "";

// -----------------------------------------------------------------------------------------
// |      |  Q  |  W  |  E  |  R  |  T  |   |  Y   |  U  |  I  |  O  |  P  |     |
// |      |  A  |  S  |  D  |  F  |  G  |   |  H   |  J  |  K  |  L  |  ;  |     |
// |      |  Z  |  X  |  C  |  V  |  B  |   |  N   |  M  |  ,  |  .  |  -  |     |
//                    | CMD | TAB | SPC |   | BKSP | NUM | MEH |
//                    | MED | NAV | NUM |   | BKSP | NUM | MEH |

            bindings = <
   &kp ESC   &kp Q         &kp W           &kp E           &kp R           &kp T           &kp Y         &kp U           &kp I           &kp O           &kp P           &none
   &kp TAB   &hm LSFT A    &hm LCTRL S     &hm LALT D      &hm LGUI F      &kp G           &kp H         &hm RGUI J      &hm RALT K      &hm LCTRL L     &hm LSFT SEMI   &none
   &kp MEH   &lt SYM Z     &kp X           &kp C           &kp V           &kp B           &kp N         &kp M           &kp COMMA       &kp DOT         &lt SYM MINUS   &none
                                           &kp LGUI        &lt NAV TAB     &lt NUM SPACE   &lt SYM BKSP  &kp RET         &lt FUN MEH
            >;
        };

        media_layer {
            label = "";

// -----------------------------------------------------------------------------------------
// |      |  X  |  X  |  X  |  X  |  X  |   |  X  |  X  |  X  |  X  |  X  |     |
// |      |  X  |  X  |  X  |  X  |  X  |   |  X  |  X  |  X  |  X  |  X  |     |
// |      |  X  |  X  |  X  |  X  |  X  |   |  X  |  X  |  X  |  X  |  X  |     |
//                    |  X  |  X  |  X  |   |  X  |  X  |  X  |

            bindings = <
   &none  &none        &none         &none          &none          &none          &none       &none          &none          &kp VOL_UP     &none           &none
   &none  &kp LSFT     &kp LCTRL     &kp LALT       &kp LGUI       &none          &none       &none          &kp PREV       &kp VOL_DN     &kp NEXT        &none
   &none  &none        &none         &none          &none          &none          &none       &none          &none          &none          &none           &none
                                     &none          &none          &none          &none       &none          &none
            >;
        };

//        layer {
//            label = "";
//
// -----------------------------------------------------------------------------------------
// |      |  X  |  X  |  X  |  X  |  X  |   |  X  |  X  |  X  |  X  |  X  |     |
// |      |  X  |  X  |  X  |  X  |  X  |   |  X  |  X  |  X  |  X  |  X  |     |
// |      |  X  |  X  |  X  |  X  |  X  |   |  X  |  X  |  X  |  X  |  X  |     |
//                    |  X  |  X  |  X  |   |  X  |  X  |  X  |
//
//            bindings = <
//   &none  &none        &none         &none          &none          &none          &none       &none          &none          &none          &none           &none
//   &none  &none        &none         &none          &none          &none          &none       &none          &none          &none          &none           &none
//   &none  &none        &none         &none          &none          &none          &none       &none          &none          &none          &none           &none
//                                     &none          &none          &none          &none       &none          &none
//            >;
//        };

    };
};
